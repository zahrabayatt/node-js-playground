// when you store a document in the MongoDB, it sets the value of the id property to long string like this:
// _id: 66ed634f95b62d83c580cceb

// so we have a 24 characters and every two characters represents a bite, so essentially we have 12 bytes to uniq the identify in the document in MongoDB.

// 12 bytes includes in order:
//  4 bytes: it represents timestamp(createAt)
//  3 bytes: it represents machine identifier
//  2 bytes: it represents process identifier
//  3 bytes: it represents counter (it's not the index of document in db, it's a differentiator for documents that created in same timestamp, machine and process)

// there is a very very very low chance that will be generate two object id that are the same.

// How this can happened?
// in each byte we have 8 bits, so we can represent 2 ^ 8 which is 265 numbers in one byte. the last three byte in objectId represents counter, so we can represents 2 ^ 24 which is 16M numbers. if at the same second, same machine and the same process we create over 16M documents, this counter overflow and that's when we might ended up two documents with same Id.

// Can we don't have a mechanism in mongodb that grantees the uniqueness, like in sql server database in each table, we have a auto incrementing number that grantees uniqueness, so next time we want to store the course document in database, the id of this course is the id of last course plus one. this approach grantees uniqueness but it hurts scalability.
// in mongodb the id is not actually generated by itself, it is generated by MongoDB Driver and that means we don't have to wait to mongoDB to generate the new identifier and that's why applications that build top of the mongoDb is highly scalable, we can have several intense of mongoDb and we don't need to talk to several intense to get id, the driver can generate the id using these 12 bytes that we talked.
// so when we build the application using the node and express, we use mongoose and it is a abstraction over the MongoDB Driver, so when we create a new document, mongoose talks to mongoDb driver and generate a new id.

// we can also explicitly generate the object Id using mongoose:

const mongoose = require("mongoose");

const id = new mongoose.Types.ObjectId();
console.log(id);
console.log(id.getTimestamp());

// we can also check the id is a valid object id or not:
const isValid = mongoose.Types.ObjectId.isValid("1234");
console.log(isValid);
